interactions:
- request:
    body: '{"message": "which employee has the highest salary?", "model": "command-r-plus",
      "preamble": "## Task And Context\nYou are an agent designed to interact with
      a SQL database.\nGiven an input question, create a syntactically correct sqlite
      query to run, then look at the results of the query and return the answer.\nUnless
      the user specifies a specific number of examples they wish to obtain, always
      limit your query to at most 10 results.\nYou can order the results by a relevant
      column to return the most interesting examples in the database.\nNever query
      for all the columns from a specific table, only ask for the relevant columns
      given the question.\nYou have access to tools for interacting with the database.\nOnly
      use the below tools. Only use the information returned by the below tools to
      construct your final answer.\nYou MUST double check your query before executing
      it. If you get an error while executing a query, rewrite the query and try again.\nDO
      NOT make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.\nIf
      the question does not seem related to the database, just return \"I don''t know\"
      as the answer.\nThe current date is Thursday, July 25, 2024 15:36:53\n\n## Style
      Guide\nUnless the user asks for a different style of answer, you should answer
      in full sentences, using proper grammar and spelling\n", "chat_history": [{"role":
      "User", "message": "Please look at the tables in the database to see what you
      can query. Then you should query the schema of the most relevant tables."}],
      "tools": [{"name": "sql_db_query", "description": "Input to this tool is a detailed
      and correct SQL query, output is a result from the database. If the query is
      not correct, an error message will be returned. If an error is returned, rewrite
      the query, check the query, and try again. If you encounter an issue with Unknown
      column ''xxxx'' in ''field list'', use sql_db_schema to query the correct table
      fields.", "parameter_definitions": {"query": {"description": "A detailed and
      correct SQL query.", "type": "str", "required": true}}}, {"name": "sql_db_schema",
      "description": "Input to this tool is a comma-separated list of tables, output
      is the schema and sample rows for those tables. Be sure that the tables actually
      exist by calling sql_db_list_tables first! Example Input: table1, table2, table3",
      "parameter_definitions": {"table_names": {"description": "A comma-separated
      list of the table names for which to return the schema. Example input: ''table1,
      table2, table3''", "type": "str", "required": true}}}, {"name": "sql_db_list_tables",
      "description": "Input is an empty string, output is a comma-separated list of
      tables in the database.", "parameter_definitions": {"tool_input": {"description":
      "An empty string", "type": "str", "required": false}}}, {"name": "sql_db_query_checker",
      "description": "Use this tool to double check if your query is correct before
      executing it. Always use this tool before executing a query with sql_db_query!",
      "parameter_definitions": {"query": {"description": "A detailed and SQL query
      to be checked.", "type": "str", "required": true}}}], "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3125'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.8
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"323ec5cf-95f1-4b14-b112-07ddf1c68b19"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" will"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" first"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" find"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" out"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" name"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" of"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" table"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" contains"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" employee"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" salary"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" information"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" Then"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":","}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" will"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" query"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" schema"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" of"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" table"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" to"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" find"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" out"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" name"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" of"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" column"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" contains"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" salary"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" information"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" Finally"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":","}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" will"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" write"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" and"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" execute"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" a"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" query"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" to"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" find"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" employee"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" with"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" highest"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" salary"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"name":"sql_db_list_tables"}}

        {"is_finished":false,"event_type":"tool-calls-generation","text":"I will first
        find out the name of the table that contains employee salary information.
        Then, I will query the schema of that table to find out the name of the column
        that contains salary information. Finally, I will write and execute a query
        to find the employee with the highest salary.","tool_calls":[{"name":"sql_db_list_tables","parameters":{}}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"e6a91f0d-10f0-4020-914d-3421b13e9e17","text":"I
        will first find out the name of the table that contains employee salary information.
        Then, I will query the schema of that table to find out the name of the column
        that contains salary information. Finally, I will write and execute a query
        to find the employee with the highest salary.","generation_id":"323ec5cf-95f1-4b14-b112-07ddf1c68b19","chat_history":[{"role":"USER","message":"Please
        look at the tables in the database to see what you can query. Then you should
        query the schema of the most relevant tables."},{"role":"USER","message":"which
        employee has the highest salary?"},{"role":"CHATBOT","message":"I will first
        find out the name of the table that contains employee salary information.
        Then, I will query the schema of that table to find out the name of the column
        that contains salary information. Finally, I will write and execute a query
        to find the employee with the highest salary.","tool_calls":[{"name":"sql_db_list_tables","parameters":{}}]}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":573,"output_tokens":65},"tokens":{"input_tokens":1424,"output_tokens":94}},"tool_calls":[{"name":"sql_db_list_tables","parameters":{}}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Thu, 25 Jul 2024 07:36:53 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - 94dd1c272045d772ac9862539c77ff8a
      x-endpoint-monthly-call-limit:
      - '1000'
      x-envoy-upstream-service-time:
      - '66'
      x-trial-endpoint-call-limit:
      - '40'
      x-trial-endpoint-call-remaining:
      - '39'
    status:
      code: 200
      message: OK
- request:
    body: '{"message": "", "model": "command-r-plus", "preamble": "## Task And Context\nYou
      are an agent designed to interact with a SQL database.\nGiven an input question,
      create a syntactically correct sqlite query to run, then look at the results
      of the query and return the answer.\nUnless the user specifies a specific number
      of examples they wish to obtain, always limit your query to at most 10 results.\nYou
      can order the results by a relevant column to return the most interesting examples
      in the database.\nNever query for all the columns from a specific table, only
      ask for the relevant columns given the question.\nYou have access to tools for
      interacting with the database.\nOnly use the below tools. Only use the information
      returned by the below tools to construct your final answer.\nYou MUST double
      check your query before executing it. If you get an error while executing a
      query, rewrite the query and try again.\nDO NOT make any DML statements (INSERT,
      UPDATE, DELETE, DROP etc.) to the database.\nIf the question does not seem related
      to the database, just return \"I don''t know\" as the answer.\nThe current date
      is Thursday, July 25, 2024 15:36:53\n\n## Style Guide\nUnless the user asks
      for a different style of answer, you should answer in full sentences, using
      proper grammar and spelling\n", "chat_history": [{"role": "User", "message":
      "Please look at the tables in the database to see what you can query. Then you
      should query the schema of the most relevant tables."}, {"role": "User", "message":
      "which employee has the highest salary?"}, {"role": "Chatbot", "message": "I
      will first find out the name of the table that contains employee salary information.
      Then, I will query the schema of that table to find out the name of the column
      that contains salary information. Finally, I will write and execute a query
      to find the employee with the highest salary.", "tool_calls": [{"name": "sql_db_list_tables",
      "args": {}, "id": "3ea2d5a6a534462d9a169c68a1ff22f6", "type": "tool_call"}]}],
      "tools": [{"name": "sql_db_query", "description": "Input to this tool is a detailed
      and correct SQL query, output is a result from the database. If the query is
      not correct, an error message will be returned. If an error is returned, rewrite
      the query, check the query, and try again. If you encounter an issue with Unknown
      column ''xxxx'' in ''field list'', use sql_db_schema to query the correct table
      fields.", "parameter_definitions": {"query": {"description": "A detailed and
      correct SQL query.", "type": "str", "required": true}}}, {"name": "sql_db_schema",
      "description": "Input to this tool is a comma-separated list of tables, output
      is the schema and sample rows for those tables. Be sure that the tables actually
      exist by calling sql_db_list_tables first! Example Input: table1, table2, table3",
      "parameter_definitions": {"table_names": {"description": "A comma-separated
      list of the table names for which to return the schema. Example input: ''table1,
      table2, table3''", "type": "str", "required": true}}}, {"name": "sql_db_list_tables",
      "description": "Input is an empty string, output is a comma-separated list of
      tables in the database.", "parameter_definitions": {"tool_input": {"description":
      "An empty string", "type": "str", "required": false}}}, {"name": "sql_db_query_checker",
      "description": "Use this tool to double check if your query is correct before
      executing it. Always use this tool before executing a query with sql_db_query!",
      "parameter_definitions": {"query": {"description": "A detailed and SQL query
      to be checked.", "type": "str", "required": true}}}], "tool_results": [{"call":
      {"name": "sql_db_list_tables", "parameters": {}}, "outputs": [{"output": "employees"}]}],
      "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3720'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.8
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"eb7a44ff-7be7-46ed-91f6-b9e28393326a"}

        {"is_finished":false,"event_type":"search-results","documents":[{"id":"sql_db_list_tables:0:3:0","output":"employees","tool_name":"sql_db_list_tables"}]}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" found"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" out"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" name"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" of"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" table"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" contains"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" employee"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" information"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" is"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" \""}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"employees"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"\"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" Now"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":","}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" will"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" query"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" schema"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" of"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" this"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" table"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" to"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" find"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" out"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" name"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" of"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" column"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" contains"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" salary"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" information"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"name":"sql_db_schema"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"{\n    \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"table"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"names"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"\":"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"employees"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"\""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"}"}}

        {"is_finished":false,"event_type":"tool-calls-generation","text":"I found
        out that the name of the table that contains employee information is \"employees\".
        Now, I will query the schema of this table to find out the name of the column
        that contains salary information.","tool_calls":[{"name":"sql_db_schema","parameters":{"table_names":"employees"}}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"3fb4f243-3f33-4540-ae68-cf3a2d9ba602","text":"I
        found out that the name of the table that contains employee information is
        \"employees\". Now, I will query the schema of this table to find out the
        name of the column that contains salary information.","generation_id":"eb7a44ff-7be7-46ed-91f6-b9e28393326a","chat_history":[{"role":"USER","message":"Please
        look at the tables in the database to see what you can query. Then you should
        query the schema of the most relevant tables."},{"role":"USER","message":"which
        employee has the highest salary?"},{"role":"CHATBOT","message":"I will first
        find out the name of the table that contains employee salary information.
        Then, I will query the schema of that table to find out the name of the column
        that contains salary information. Finally, I will write and execute a query
        to find the employee with the highest salary.","tool_calls":[{"name":"sql_db_list_tables","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"sql_db_list_tables","parameters":{}},"outputs":[{"output":"employees"}]}]},{"role":"CHATBOT","message":"I
        found out that the name of the table that contains employee information is
        \"employees\". Now, I will query the schema of this table to find out the
        name of the column that contains salary information.","tool_calls":[{"name":"sql_db_schema","parameters":{"table_names":"employees"}}]}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":645,"output_tokens":52},"tokens":{"input_tokens":1552,"output_tokens":86}},"tool_calls":[{"name":"sql_db_schema","parameters":{"table_names":"employees"}}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Thu, 25 Jul 2024 07:36:55 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - ea4cbae39639fd3c4e35dd526a8f3c3b
      x-endpoint-monthly-call-limit:
      - '1000'
      x-envoy-upstream-service-time:
      - '78'
      x-trial-endpoint-call-limit:
      - '40'
      x-trial-endpoint-call-remaining:
      - '38'
    status:
      code: 200
      message: OK
- request:
    body: '{"message": "", "model": "command-r-plus", "preamble": "## Task And Context\nYou
      are an agent designed to interact with a SQL database.\nGiven an input question,
      create a syntactically correct sqlite query to run, then look at the results
      of the query and return the answer.\nUnless the user specifies a specific number
      of examples they wish to obtain, always limit your query to at most 10 results.\nYou
      can order the results by a relevant column to return the most interesting examples
      in the database.\nNever query for all the columns from a specific table, only
      ask for the relevant columns given the question.\nYou have access to tools for
      interacting with the database.\nOnly use the below tools. Only use the information
      returned by the below tools to construct your final answer.\nYou MUST double
      check your query before executing it. If you get an error while executing a
      query, rewrite the query and try again.\nDO NOT make any DML statements (INSERT,
      UPDATE, DELETE, DROP etc.) to the database.\nIf the question does not seem related
      to the database, just return \"I don''t know\" as the answer.\nThe current date
      is Thursday, July 25, 2024 15:36:53\n\n## Style Guide\nUnless the user asks
      for a different style of answer, you should answer in full sentences, using
      proper grammar and spelling\n", "chat_history": [{"role": "User", "message":
      "Please look at the tables in the database to see what you can query. Then you
      should query the schema of the most relevant tables."}, {"role": "User", "message":
      "which employee has the highest salary?"}, {"role": "Chatbot", "message": "I
      will first find out the name of the table that contains employee salary information.
      Then, I will query the schema of that table to find out the name of the column
      that contains salary information. Finally, I will write and execute a query
      to find the employee with the highest salary.", "tool_calls": [{"name": "sql_db_list_tables",
      "args": {}, "id": "3ea2d5a6a534462d9a169c68a1ff22f6", "type": "tool_call"}]},
      {"role": "Tool", "tool_results": [{"call": {"name": "sql_db_list_tables", "parameters":
      {}}, "outputs": [{"output": "employees"}]}]}, {"role": "Chatbot", "message":
      "I found out that the name of the table that contains employee information is
      \"employees\". Now, I will query the schema of this table to find out the name
      of the column that contains salary information.", "tool_calls": [{"name": "sql_db_schema",
      "args": {"table_names": "employees"}, "id": "de4ee27566f24750860ca9717bcdaec7",
      "type": "tool_call"}]}], "tools": [{"name": "sql_db_query", "description": "Input
      to this tool is a detailed and correct SQL query, output is a result from the
      database. If the query is not correct, an error message will be returned. If
      an error is returned, rewrite the query, check the query, and try again. If
      you encounter an issue with Unknown column ''xxxx'' in ''field list'', use sql_db_schema
      to query the correct table fields.", "parameter_definitions": {"query": {"description":
      "A detailed and correct SQL query.", "type": "str", "required": true}}}, {"name":
      "sql_db_schema", "description": "Input to this tool is a comma-separated list
      of tables, output is the schema and sample rows for those tables. Be sure that
      the tables actually exist by calling sql_db_list_tables first! Example Input:
      table1, table2, table3", "parameter_definitions": {"table_names": {"description":
      "A comma-separated list of the table names for which to return the schema. Example
      input: ''table1, table2, table3''", "type": "str", "required": true}}}, {"name":
      "sql_db_list_tables", "description": "Input is an empty string, output is a
      comma-separated list of tables in the database.", "parameter_definitions": {"tool_input":
      {"description": "An empty string", "type": "str", "required": false}}}, {"name":
      "sql_db_query_checker", "description": "Use this tool to double check if your
      query is correct before executing it. Always use this tool before executing
      a query with sql_db_query!", "parameter_definitions": {"query": {"description":
      "A detailed and SQL query to be checked.", "type": "str", "required": true}}}],
      "tool_results": [{"call": {"name": "sql_db_schema", "parameters": {"table_names":
      "employees"}}, "outputs": [{"output": "\nCREATE TABLE employees (\n\tid INTEGER,
      \n\tname TEXT NOT NULL, \n\tage INTEGER, \n\tsalary REAL, \n\tjoined_date DATE,
      \n\tPRIMARY KEY (id)\n)\n\n/*\n3 rows from employees table:\nid\tname\tage\tsalary\tjoined_date\n1\tJohn
      Smith\t30\t60000.5\t2024-06-12\n2\tJane Doe\t28\t75000.75\t2024-06-11\n3\tAlex
      Johnson\t25\t55000.0\tNone\n*/"}]}], "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4585'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.8
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"a69e0b9b-c3d2-4978-ad12-9786c22212e0"}

        {"is_finished":false,"event_type":"search-results","documents":[{"id":"sql_db_list_tables:0:3:0","output":"employees","tool_name":"sql_db_list_tables"},{"id":"sql_db_schema:0:5:0","output":"\nCREATE
        TABLE employees (\n\tid INTEGER, \n\tname TEXT NOT NULL, \n\tage INTEGER,
        \n\tsalary REAL, \n\tjoined_date DATE, \n\tPRIMARY KEY (id)\n)\n\n/*\n3 rows
        from employees table:\nid\tname\tage\tsalary\tjoined_date\n1\tJohn Smith\t30\t60000.5\t2024-06-12\n2\tJane
        Doe\t28\t75000.75\t2024-06-11\n3\tAlex Johnson\t25\t55000.0\tNone\n*/","tool_name":"sql_db_schema"}]}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" found"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" out"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" column"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" that"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" contains"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" salary"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" information"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" is"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" called"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" \""}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"sal"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"ary"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"\"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" Now"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":","}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" will"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" write"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" and"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" execute"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" a"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" query"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" to"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" find"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" employee"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" with"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" highest"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" salary"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"name":"sql_db_query"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"{\n    \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"query"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"\":"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"SELECT"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        name"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":","}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        salary"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        FROM"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        employees"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        ORDER BY"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        salary"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        DESC LIMIT"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"
        "}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"1"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"\""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"index":0,"parameters":"}"}}

        {"is_finished":false,"event_type":"tool-calls-generation","text":"I found
        out that the column that contains salary information is called \"salary\".
        Now, I will write and execute a query to find the employee with the highest
        salary.","tool_calls":[{"name":"sql_db_query","parameters":{"query":"SELECT
        name, salary FROM employees ORDER BY salary DESC LIMIT 1"}}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"214135d7-c273-4906-ad3a-20137a35c8bd","text":"I
        found out that the column that contains salary information is called \"salary\".
        Now, I will write and execute a query to find the employee with the highest
        salary.","generation_id":"a69e0b9b-c3d2-4978-ad12-9786c22212e0","chat_history":[{"role":"USER","message":"Please
        look at the tables in the database to see what you can query. Then you should
        query the schema of the most relevant tables."},{"role":"USER","message":"which
        employee has the highest salary?"},{"role":"CHATBOT","message":"I will first
        find out the name of the table that contains employee salary information.
        Then, I will query the schema of that table to find out the name of the column
        that contains salary information. Finally, I will write and execute a query
        to find the employee with the highest salary.","tool_calls":[{"name":"sql_db_list_tables","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"sql_db_list_tables","parameters":{}},"outputs":[{"output":"employees"}]}]},{"role":"CHATBOT","message":"I
        found out that the name of the table that contains employee information is
        \"employees\". Now, I will query the schema of this table to find out the
        name of the column that contains salary information.","tool_calls":[{"name":"sql_db_schema","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"sql_db_schema","parameters":{"table_names":"employees"}},"outputs":[{"output":"\nCREATE
        TABLE employees (\n\tid INTEGER, \n\tname TEXT NOT NULL, \n\tage INTEGER,
        \n\tsalary REAL, \n\tjoined_date DATE, \n\tPRIMARY KEY (id)\n)\n\n/*\n3 rows
        from employees table:\nid\tname\tage\tsalary\tjoined_date\n1\tJohn Smith\t30\t60000.5\t2024-06-12\n2\tJane
        Doe\t28\t75000.75\t2024-06-11\n3\tAlex Johnson\t25\t55000.0\tNone\n*/"}]}]},{"role":"CHATBOT","message":"I
        found out that the column that contains salary information is called \"salary\".
        Now, I will write and execute a query to find the employee with the highest
        salary.","tool_calls":[{"name":"sql_db_query","parameters":{"query":"SELECT
        name, salary FROM employees ORDER BY salary DESC LIMIT 1"}}]}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":841,"output_tokens":56},"tokens":{"input_tokens":1812,"output_tokens":90}},"tool_calls":[{"name":"sql_db_query","parameters":{"query":"SELECT
        name, salary FROM employees ORDER BY salary DESC LIMIT 1"}}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Thu, 25 Jul 2024 07:36:57 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - 5ff70ce7a1e1d1787a75467e6f4781ea
      x-endpoint-monthly-call-limit:
      - '1000'
      x-envoy-upstream-service-time:
      - '74'
      x-trial-endpoint-call-limit:
      - '40'
      x-trial-endpoint-call-remaining:
      - '37'
    status:
      code: 200
      message: OK
- request:
    body: '{"message": "", "model": "command-r-plus", "preamble": "## Task And Context\nYou
      are an agent designed to interact with a SQL database.\nGiven an input question,
      create a syntactically correct sqlite query to run, then look at the results
      of the query and return the answer.\nUnless the user specifies a specific number
      of examples they wish to obtain, always limit your query to at most 10 results.\nYou
      can order the results by a relevant column to return the most interesting examples
      in the database.\nNever query for all the columns from a specific table, only
      ask for the relevant columns given the question.\nYou have access to tools for
      interacting with the database.\nOnly use the below tools. Only use the information
      returned by the below tools to construct your final answer.\nYou MUST double
      check your query before executing it. If you get an error while executing a
      query, rewrite the query and try again.\nDO NOT make any DML statements (INSERT,
      UPDATE, DELETE, DROP etc.) to the database.\nIf the question does not seem related
      to the database, just return \"I don''t know\" as the answer.\nThe current date
      is Thursday, July 25, 2024 15:36:53\n\n## Style Guide\nUnless the user asks
      for a different style of answer, you should answer in full sentences, using
      proper grammar and spelling\n", "chat_history": [{"role": "User", "message":
      "Please look at the tables in the database to see what you can query. Then you
      should query the schema of the most relevant tables."}, {"role": "User", "message":
      "which employee has the highest salary?"}, {"role": "Chatbot", "message": "I
      will first find out the name of the table that contains employee salary information.
      Then, I will query the schema of that table to find out the name of the column
      that contains salary information. Finally, I will write and execute a query
      to find the employee with the highest salary.", "tool_calls": [{"name": "sql_db_list_tables",
      "args": {}, "id": "3ea2d5a6a534462d9a169c68a1ff22f6", "type": "tool_call"}]},
      {"role": "Tool", "tool_results": [{"call": {"name": "sql_db_list_tables", "parameters":
      {}}, "outputs": [{"output": "employees"}]}]}, {"role": "Chatbot", "message":
      "I found out that the name of the table that contains employee information is
      \"employees\". Now, I will query the schema of this table to find out the name
      of the column that contains salary information.", "tool_calls": [{"name": "sql_db_schema",
      "args": {"table_names": "employees"}, "id": "de4ee27566f24750860ca9717bcdaec7",
      "type": "tool_call"}]}, {"role": "Tool", "tool_results": [{"call": {"name":
      "sql_db_schema", "parameters": {"table_names": "employees"}}, "outputs": [{"output":
      "\nCREATE TABLE employees (\n\tid INTEGER, \n\tname TEXT NOT NULL, \n\tage INTEGER,
      \n\tsalary REAL, \n\tjoined_date DATE, \n\tPRIMARY KEY (id)\n)\n\n/*\n3 rows
      from employees table:\nid\tname\tage\tsalary\tjoined_date\n1\tJohn Smith\t30\t60000.5\t2024-06-12\n2\tJane
      Doe\t28\t75000.75\t2024-06-11\n3\tAlex Johnson\t25\t55000.0\tNone\n*/"}]}]},
      {"role": "Chatbot", "message": "I found out that the column that contains salary
      information is called \"salary\". Now, I will write and execute a query to find
      the employee with the highest salary.", "tool_calls": [{"name": "sql_db_query",
      "args": {"query": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT
      1"}, "id": "62ba0343e66245c3be9c129e001ea66c", "type": "tool_call"}]}], "tools":
      [{"name": "sql_db_query", "description": "Input to this tool is a detailed and
      correct SQL query, output is a result from the database. If the query is not
      correct, an error message will be returned. If an error is returned, rewrite
      the query, check the query, and try again. If you encounter an issue with Unknown
      column ''xxxx'' in ''field list'', use sql_db_schema to query the correct table
      fields.", "parameter_definitions": {"query": {"description": "A detailed and
      correct SQL query.", "type": "str", "required": true}}}, {"name": "sql_db_schema",
      "description": "Input to this tool is a comma-separated list of tables, output
      is the schema and sample rows for those tables. Be sure that the tables actually
      exist by calling sql_db_list_tables first! Example Input: table1, table2, table3",
      "parameter_definitions": {"table_names": {"description": "A comma-separated
      list of the table names for which to return the schema. Example input: ''table1,
      table2, table3''", "type": "str", "required": true}}}, {"name": "sql_db_list_tables",
      "description": "Input is an empty string, output is a comma-separated list of
      tables in the database.", "parameter_definitions": {"tool_input": {"description":
      "An empty string", "type": "str", "required": false}}}, {"name": "sql_db_query_checker",
      "description": "Use this tool to double check if your query is correct before
      executing it. Always use this tool before executing a query with sql_db_query!",
      "parameter_definitions": {"query": {"description": "A detailed and SQL query
      to be checked.", "type": "str", "required": true}}}], "tool_results": [{"call":
      {"name": "sql_db_query", "parameters": {"query": "SELECT name, salary FROM employees
      ORDER BY salary DESC LIMIT 1"}}, "outputs": [{"output": "[(''Jane Doe'', 75000.75)]"}]}],
      "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '5195'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.8
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"b15d0dad-6909-41ab-b20d-b7f0c38e325f"}

        {"is_finished":false,"event_type":"search-results","documents":[{"id":"sql_db_list_tables:0:3:0","output":"employees","tool_name":"sql_db_list_tables"},{"id":"sql_db_schema:0:5:0","output":"\nCREATE
        TABLE employees (\n\tid INTEGER, \n\tname TEXT NOT NULL, \n\tage INTEGER,
        \n\tsalary REAL, \n\tjoined_date DATE, \n\tPRIMARY KEY (id)\n)\n\n/*\n3 rows
        from employees table:\nid\tname\tage\tsalary\tjoined_date\n1\tJohn Smith\t30\t60000.5\t2024-06-12\n2\tJane
        Doe\t28\t75000.75\t2024-06-11\n3\tAlex Johnson\t25\t55000.0\tNone\n*/","tool_name":"sql_db_schema"},{"id":"sql_db_query:0:7:0","output":"[(''Jane
        Doe'', 75000.75)]","tool_name":"sql_db_query"}]}

        {"is_finished":false,"event_type":"text-generation","text":"The"}

        {"is_finished":false,"event_type":"text-generation","text":" employee"}

        {"is_finished":false,"event_type":"text-generation","text":" with"}

        {"is_finished":false,"event_type":"text-generation","text":" the"}

        {"is_finished":false,"event_type":"text-generation","text":" highest"}

        {"is_finished":false,"event_type":"text-generation","text":" salary"}

        {"is_finished":false,"event_type":"text-generation","text":" is"}

        {"is_finished":false,"event_type":"text-generation","text":" Jane"}

        {"is_finished":false,"event_type":"text-generation","text":" Doe"}

        {"is_finished":false,"event_type":"text-generation","text":","}

        {"is_finished":false,"event_type":"text-generation","text":" with"}

        {"is_finished":false,"event_type":"text-generation","text":" a"}

        {"is_finished":false,"event_type":"text-generation","text":" salary"}

        {"is_finished":false,"event_type":"text-generation","text":" of"}

        {"is_finished":false,"event_type":"text-generation","text":" 7"}

        {"is_finished":false,"event_type":"text-generation","text":"5"}

        {"is_finished":false,"event_type":"text-generation","text":"0"}

        {"is_finished":false,"event_type":"text-generation","text":"0"}

        {"is_finished":false,"event_type":"text-generation","text":"0"}

        {"is_finished":false,"event_type":"text-generation","text":"."}

        {"is_finished":false,"event_type":"text-generation","text":"7"}

        {"is_finished":false,"event_type":"text-generation","text":"5"}

        {"is_finished":false,"event_type":"text-generation","text":"."}

        {"is_finished":false,"event_type":"citation-generation","citations":[{"start":40,"end":48,"text":"Jane
        Doe","document_ids":["sql_db_query:0:7:0"]}]}

        {"is_finished":false,"event_type":"citation-generation","citations":[{"start":67,"end":75,"text":"75000.75","document_ids":["sql_db_query:0:7:0"]}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"5b5baf91-3da1-4887-a7eb-e46b3c1a294d","text":"The
        employee with the highest salary is Jane Doe, with a salary of 75000.75.","generation_id":"b15d0dad-6909-41ab-b20d-b7f0c38e325f","chat_history":[{"role":"USER","message":"Please
        look at the tables in the database to see what you can query. Then you should
        query the schema of the most relevant tables."},{"role":"USER","message":"which
        employee has the highest salary?"},{"role":"CHATBOT","message":"I will first
        find out the name of the table that contains employee salary information.
        Then, I will query the schema of that table to find out the name of the column
        that contains salary information. Finally, I will write and execute a query
        to find the employee with the highest salary.","tool_calls":[{"name":"sql_db_list_tables","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"sql_db_list_tables","parameters":{}},"outputs":[{"output":"employees"}]}]},{"role":"CHATBOT","message":"I
        found out that the name of the table that contains employee information is
        \"employees\". Now, I will query the schema of this table to find out the
        name of the column that contains salary information.","tool_calls":[{"name":"sql_db_schema","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"sql_db_schema","parameters":{"table_names":"employees"}},"outputs":[{"output":"\nCREATE
        TABLE employees (\n\tid INTEGER, \n\tname TEXT NOT NULL, \n\tage INTEGER,
        \n\tsalary REAL, \n\tjoined_date DATE, \n\tPRIMARY KEY (id)\n)\n\n/*\n3 rows
        from employees table:\nid\tname\tage\tsalary\tjoined_date\n1\tJohn Smith\t30\t60000.5\t2024-06-12\n2\tJane
        Doe\t28\t75000.75\t2024-06-11\n3\tAlex Johnson\t25\t55000.0\tNone\n*/"}]}]},{"role":"CHATBOT","message":"I
        found out that the column that contains salary information is called \"salary\".
        Now, I will write and execute a query to find the employee with the highest
        salary.","tool_calls":[{"name":"sql_db_query","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"sql_db_query","parameters":{"query":"SELECT
        name, salary FROM employees ORDER BY salary DESC LIMIT 1"}},"outputs":[{"output":"[(''Jane
        Doe'', 75000.75)]"}]}]},{"role":"CHATBOT","message":"The employee with the
        highest salary is Jane Doe, with a salary of 75000.75."}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":903,"output_tokens":24},"tokens":{"input_tokens":1948,"output_tokens":94}},"citations":[{"start":40,"end":48,"text":"Jane
        Doe","document_ids":["sql_db_query:0:7:0"]},{"start":67,"end":75,"text":"75000.75","document_ids":["sql_db_query:0:7:0"]}],"documents":[{"id":"sql_db_query:0:7:0","output":"[(''Jane
        Doe'', 75000.75)]","tool_name":"sql_db_query"}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Thu, 25 Jul 2024 07:37:00 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - dc8c9c380241d7b53deb78f3db1b877c
      x-endpoint-monthly-call-limit:
      - '1000'
      x-envoy-upstream-service-time:
      - '136'
      x-trial-endpoint-call-limit:
      - '40'
      x-trial-endpoint-call-remaining:
      - '36'
    status:
      code: 200
      message: OK
version: 1
