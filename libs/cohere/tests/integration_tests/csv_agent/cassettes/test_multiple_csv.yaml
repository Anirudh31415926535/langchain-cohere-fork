interactions:
- request:
    body: '{"message": "Which movie has the highest average rating?", "chat_history":
      [{"role": "System", "message": "\nYou are working with 2 pandas dataframes in
      Python named df1, df2, etc.\nThis is the result of `print(df.head())` for each
      dataframe:\n|    | movie                    | user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
      | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
      | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7 |\n|  3
      | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
      Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
      |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The Shawshank
      Redemption | John   |             2 |\n|  1 | The Shawshank Redemption | Jerry  |             2
      |\n|  2 | The Shawshank Redemption | Jack   |             4 |\n|  3 | The Shawshank
      Redemption | Jeremy |             2 |\n|  4 | Finding Nemo             | Darren
      |             3 |\n\nDo note that the above dfs aren''t the complete df. It
      is only the first 5 rows of the df.\nUse this as a sample to understand the
      structure of the df. However, donot use this to make any calculations directly!\n\nThe
      complete path for the csv files are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"}],
      "tools": [{"name": "peek_df", "description": "A function that will return a
      preview of the dataframe based on the table path.", "parameter_definitions":
      {"table_path": {"description": "the table path", "type": "str", "required":
      true}, "num_rows": {"description": "the number of rows of the table to preview",
      "type": "int", "required": true}}}, {"name": "python_repl", "description": "Executes
      python code and returns the result. The code runs in a static sandbox without
      interactive mode, so print output or save output to a file.", "parameter_definitions":
      {"code": {"description": "Python code to execute.", "type": "str", "required":
      true}}}], "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2129'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.6
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"5f350bcd-4327-4f1d-aa78-7b598507ecaf"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" will"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" use"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" Python"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" to"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" find"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" movie"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" with"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" highest"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" average"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" rating"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"name":"python_repl"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"{\n            \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"code"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\":"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"import"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        pandas"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        as"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        pd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\nd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"f"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        pd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"read"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"(''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tests"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"integration"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tests"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"agent"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"ratings"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'')"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"#"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Group"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        by"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        and"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        calculate"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        average"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        rating"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\nd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"f"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"grouped"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"groupby"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"(''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'')"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"[''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"rating"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'']."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"mean"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"()"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"#"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Find"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        with"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        highest"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        average"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        rating"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\nh"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"igh"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"est"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"rated"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"grouped"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"idx"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"max"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"()"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"print"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"("}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"f"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\\""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"The"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        with"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        highest"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        average"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        rating"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        is"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        {"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"highest"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"rated"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"}\\\")"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\n       "}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        }"}}

        {"is_finished":false,"event_type":"tool-calls-generation","text":"I will use
        Python to find the movie with the highest average rating.","tool_calls":[{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\ndf = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\n\n#
        Group by movie and calculate average rating\ndf_grouped = df.groupby(''movie'')[''rating''].mean()\n\n#
        Find the movie with the highest average rating\nhighest_rated_movie = df_grouped.idxmax()\n\nprint(f\"The
        movie with the highest average rating is {highest_rated_movie}\")"}}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"48fd9e4a-2c55-4d98-a3ed-67f5fe472566","text":"I
        will use Python to find the movie with the highest average rating.","generation_id":"5f350bcd-4327-4f1d-aa78-7b598507ecaf","chat_history":[{"role":"SYSTEM","message":"\nYou
        are working with 2 pandas dataframes in Python named df1, df2, etc.\nThis
        is the result of `print(df.head())` for each dataframe:\n|    | movie                    |
        user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
        | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
        | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7
        |\n|  3 | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
        Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
        |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The
        Shawshank Redemption | John   |             2 |\n|  1 | The Shawshank Redemption
        | Jerry  |             2 |\n|  2 | The Shawshank Redemption | Jack   |             4
        |\n|  3 | The Shawshank Redemption | Jeremy |             2 |\n|  4 | Finding
        Nemo             | Darren |             3 |\n\nDo note that the above dfs
        aren''t the complete df. It is only the first 5 rows of the df.\nUse this
        as a sample to understand the structure of the df. However, donot use this
        to make any calculations directly!\n\nThe complete path for the csv files
        are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"},{"role":"USER","message":"Which
        movie has the highest average rating?"},{"role":"CHATBOT","message":"I will
        use Python to find the movie with the highest average rating.","tool_calls":[{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\ndf = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\n\n#
        Group by movie and calculate average rating\ndf_grouped = df.groupby(''movie'')[''rating''].mean()\n\n#
        Find the movie with the highest average rating\nhighest_rated_movie = df_grouped.idxmax()\n\nprint(f\"The
        movie with the highest average rating is {highest_rated_movie}\")"}}]}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":429,"output_tokens":137},"tokens":{"input_tokens":1369,"output_tokens":137}},"tool_calls":[{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\ndf = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\n\n#
        Group by movie and calculate average rating\ndf_grouped = df.groupby(''movie'')[''rating''].mean()\n\n#
        Find the movie with the highest average rating\nhighest_rated_movie = df_grouped.idxmax()\n\nprint(f\"The
        movie with the highest average rating is {highest_rated_movie}\")"}}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Wed, 12 Jun 2024 08:23:21 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      transfer-encoding:
      - chunked
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - 4f6d20d5ac251222af59acc0f7ad9ad7
      x-envoy-upstream-service-time:
      - '65'
      x-trial-endpoint-call-limit:
      - '10'
      x-trial-endpoint-call-remaining:
      - '7'
    status:
      code: 200
      message: OK
- request:
    body: '{"message": "", "chat_history": [{"role": "System", "message": "\nYou are
      working with 2 pandas dataframes in Python named df1, df2, etc.\nThis is the
      result of `print(df.head())` for each dataframe:\n|    | movie                    |
      user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
      | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
      | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7 |\n|  3
      | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
      Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
      |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The Shawshank
      Redemption | John   |             2 |\n|  1 | The Shawshank Redemption | Jerry  |             2
      |\n|  2 | The Shawshank Redemption | Jack   |             4 |\n|  3 | The Shawshank
      Redemption | Jeremy |             2 |\n|  4 | Finding Nemo             | Darren
      |             3 |\n\nDo note that the above dfs aren''t the complete df. It
      is only the first 5 rows of the df.\nUse this as a sample to understand the
      structure of the df. However, donot use this to make any calculations directly!\n\nThe
      complete path for the csv files are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"},
      {"role": "User", "message": "Which movie has the highest average rating?"},
      {"role": "Chatbot", "message": "I will use Python to find the movie with the
      highest average rating.", "tool_calls": [{"name": "python_repl", "args": {"code":
      "import pandas as pd\n\ndf = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\n\n#
      Group by movie and calculate average rating\ndf_grouped = df.groupby(''movie'')[''rating''].mean()\n\n#
      Find the movie with the highest average rating\nhighest_rated_movie = df_grouped.idxmax()\n\nprint(f\"The
      movie with the highest average rating is {highest_rated_movie}\")"}, "id": "e0712dd27c1c45e2bf3b460cd90d99ab"}]}],
      "tools": [{"name": "peek_df", "description": "A function that will return a
      preview of the dataframe based on the table path.", "parameter_definitions":
      {"table_path": {"description": "the table path", "type": "str", "required":
      true}, "num_rows": {"description": "the number of rows of the table to preview",
      "type": "int", "required": true}}}, {"name": "python_repl", "description": "Executes
      python code and returns the result. The code runs in a static sandbox without
      interactive mode, so print output or save output to a file.", "parameter_definitions":
      {"code": {"description": "Python code to execute.", "type": "str", "required":
      true}}}], "tool_results": [{"call": {"name": "python_repl", "parameters": {"code":
      "import pandas as pd\n\ndf = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\n\n#
      Group by movie and calculate average rating\ndf_grouped = df.groupby(''movie'')[''rating''].mean()\n\n#
      Find the movie with the highest average rating\nhighest_rated_movie = df_grouped.idxmax()\n\nprint(f\"The
      movie with the highest average rating is {highest_rated_movie}\")"}}, "outputs":
      [{"output": "The movie with the highest average rating is The Shawshank Redemption\n"}]}],
      "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3302'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.6
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"188eac8f-81e7-4484-88e3-7660d923a97a"}

        {"is_finished":false,"event_type":"search-results","documents":[{"id":"python_repl:0:3:0","output":"The
        movie with the highest average rating is The Shawshank Redemption\n","tool_name":"python_repl"}]}

        {"is_finished":false,"event_type":"text-generation","text":"The"}

        {"is_finished":false,"event_type":"text-generation","text":" movie"}

        {"is_finished":false,"event_type":"text-generation","text":" with"}

        {"is_finished":false,"event_type":"text-generation","text":" the"}

        {"is_finished":false,"event_type":"text-generation","text":" highest"}

        {"is_finished":false,"event_type":"text-generation","text":" average"}

        {"is_finished":false,"event_type":"text-generation","text":" rating"}

        {"is_finished":false,"event_type":"text-generation","text":" is"}

        {"is_finished":false,"event_type":"text-generation","text":" *"}

        {"is_finished":false,"event_type":"text-generation","text":"The"}

        {"is_finished":false,"event_type":"text-generation","text":" Shaw"}

        {"is_finished":false,"event_type":"text-generation","text":"shank"}

        {"is_finished":false,"event_type":"text-generation","text":" Redemption"}

        {"is_finished":false,"event_type":"text-generation","text":"*."}

        {"is_finished":false,"event_type":"citation-generation","citations":[{"start":46,"end":70,"text":"The
        Shawshank Redemption","document_ids":["python_repl:0:3:0"]}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"1ad5c1f9-7061-45b8-97bd-01274d9cc9c0","text":"The
        movie with the highest average rating is *The Shawshank Redemption*.","generation_id":"188eac8f-81e7-4484-88e3-7660d923a97a","chat_history":[{"role":"SYSTEM","message":"\nYou
        are working with 2 pandas dataframes in Python named df1, df2, etc.\nThis
        is the result of `print(df.head())` for each dataframe:\n|    | movie                    |
        user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
        | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
        | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7
        |\n|  3 | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
        Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
        |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The
        Shawshank Redemption | John   |             2 |\n|  1 | The Shawshank Redemption
        | Jerry  |             2 |\n|  2 | The Shawshank Redemption | Jack   |             4
        |\n|  3 | The Shawshank Redemption | Jeremy |             2 |\n|  4 | Finding
        Nemo             | Darren |             3 |\n\nDo note that the above dfs
        aren''t the complete df. It is only the first 5 rows of the df.\nUse this
        as a sample to understand the structure of the df. However, donot use this
        to make any calculations directly!\n\nThe complete path for the csv files
        are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"},{"role":"USER","message":"Which
        movie has the highest average rating?"},{"role":"CHATBOT","message":"I will
        use Python to find the movie with the highest average rating.","tool_calls":[{"name":"python_repl","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\ndf = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\n\n#
        Group by movie and calculate average rating\ndf_grouped = df.groupby(''movie'')[''rating''].mean()\n\n#
        Find the movie with the highest average rating\nhighest_rated_movie = df_grouped.idxmax()\n\nprint(f\"The
        movie with the highest average rating is {highest_rated_movie}\")"}},"outputs":[{"output":"The
        movie with the highest average rating is The Shawshank Redemption\n"}]}]},{"role":"CHATBOT","message":"The
        movie with the highest average rating is *The Shawshank Redemption*."}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":466,"output_tokens":14},"tokens":{"input_tokens":1582,"output_tokens":14}},"citations":[{"start":46,"end":70,"text":"The
        Shawshank Redemption","document_ids":["python_repl:0:3:0"]}],"documents":[{"id":"python_repl:0:3:0","output":"The
        movie with the highest average rating is The Shawshank Redemption\n","tool_name":"python_repl"}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Wed, 12 Jun 2024 08:23:24 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      transfer-encoding:
      - chunked
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - 643c84256ac1d59a1954fd08b413d00f
      x-envoy-upstream-service-time:
      - '61'
      x-trial-endpoint-call-limit:
      - '10'
      x-trial-endpoint-call-remaining:
      - '6'
    status:
      code: 200
      message: OK
- request:
    body: '{"message": "who bought the most number of tickets to finding nemo?", "chat_history":
      [{"role": "System", "message": "\nYou are working with 2 pandas dataframes in
      Python named df1, df2, etc.\nThis is the result of `print(df.head())` for each
      dataframe:\n|    | movie                    | user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
      | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
      | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7 |\n|  3
      | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
      Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
      |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The Shawshank
      Redemption | John   |             2 |\n|  1 | The Shawshank Redemption | Jerry  |             2
      |\n|  2 | The Shawshank Redemption | Jack   |             4 |\n|  3 | The Shawshank
      Redemption | Jeremy |             2 |\n|  4 | Finding Nemo             | Darren
      |             3 |\n\nDo note that the above dfs aren''t the complete df. It
      is only the first 5 rows of the df.\nUse this as a sample to understand the
      structure of the df. However, donot use this to make any calculations directly!\n\nThe
      complete path for the csv files are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"}],
      "tools": [{"name": "peek_df", "description": "A function that will return a
      preview of the dataframe based on the table path.", "parameter_definitions":
      {"table_path": {"description": "the table path", "type": "str", "required":
      true}, "num_rows": {"description": "the number of rows of the table to preview",
      "type": "int", "required": true}}}, {"name": "python_repl", "description": "Executes
      python code and returns the result. The code runs in a static sandbox without
      interactive mode, so print output or save output to a file.", "parameter_definitions":
      {"code": {"description": "Python code to execute.", "type": "str", "required":
      true}}}], "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2140'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.6
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"6196f9c6-b973-416a-a861-a6d9ac94d08c"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"I"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" will"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" use"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" python"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" to"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" find"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" user"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" who"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" bought"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" the"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" most"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" number"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" of"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" tickets"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" to"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" Finding"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":" Nemo"}

        {"is_finished":false,"event_type":"tool-calls-chunk","text":"."}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"name":"python_repl"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"{\n            \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"code"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\":"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        \""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"import"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        pandas"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        as"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        pd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"#"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Read"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        CSV"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        files"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\nd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"f"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"1"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        pd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"read"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"(''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tests"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"integration"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tests"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"agent"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"ratings"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'')"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\nd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"f"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"2"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        pd"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"read"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"(''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tests"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"integration"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tests"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"agent"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"/"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"book"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"ings"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"csv"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'')"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"#"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Filter"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        dataframe"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        for"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"Finding"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Nemo"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"''\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"filtered"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"2"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"["}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"2"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"[''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"movie"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'']"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        =="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"Finding"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Nemo"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'']"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"#"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Get"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        user"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        with"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        most"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        number"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        of"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"max"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        filtered"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"[''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"num"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'']."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"max"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"()"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"user"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"with"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"max"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        filtered"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"["}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"filtered"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"df"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"[''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"num"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'']"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        =="}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        max"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"][''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"name"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"'']."}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"values"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"["}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"0"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"]\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\n"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"print"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"("}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"f"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\\\""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"The"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        user"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        who"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        bought"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        the"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        most"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        to"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        ''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"Finding"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        Nemo"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"''"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        is"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        {"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"user"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"with"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"max"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"}"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        with"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        {"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"max"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"_"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"}"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        tickets"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":".\\\")"}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\""}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"\n       "}}

        {"is_finished":false,"event_type":"tool-calls-chunk","tool_call_delta":{"parameters":"
        }"}}

        {"is_finished":false,"event_type":"tool-calls-generation","text":"I will use
        python to find the user who bought the most number of tickets to Finding Nemo.","tool_calls":[{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\n# Read the CSV files\ndf1 = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\ndf2
        = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_bookings.csv'')\n\n#
        Filter the dataframe for ''Finding Nemo''\nfiltered_df = df2[df2[''movie'']
        == ''Finding Nemo'']\n\n# Get the user with the most number of tickets\nmax_tickets
        = filtered_df[''num_tickets''].max()\nuser_with_max_tickets = filtered_df[filtered_df[''num_tickets'']
        == max_tickets][''name''].values[0]\n\nprint(f\"The user who bought the most
        tickets to ''Finding Nemo'' is {user_with_max_tickets} with {max_tickets}
        tickets.\")"}}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"f19abd9e-1457-4398-948e-75e25d3e387c","text":"I
        will use python to find the user who bought the most number of tickets to
        Finding Nemo.","generation_id":"6196f9c6-b973-416a-a861-a6d9ac94d08c","chat_history":[{"role":"SYSTEM","message":"\nYou
        are working with 2 pandas dataframes in Python named df1, df2, etc.\nThis
        is the result of `print(df.head())` for each dataframe:\n|    | movie                    |
        user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
        | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
        | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7
        |\n|  3 | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
        Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
        |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The
        Shawshank Redemption | John   |             2 |\n|  1 | The Shawshank Redemption
        | Jerry  |             2 |\n|  2 | The Shawshank Redemption | Jack   |             4
        |\n|  3 | The Shawshank Redemption | Jeremy |             2 |\n|  4 | Finding
        Nemo             | Darren |             3 |\n\nDo note that the above dfs
        aren''t the complete df. It is only the first 5 rows of the df.\nUse this
        as a sample to understand the structure of the df. However, donot use this
        to make any calculations directly!\n\nThe complete path for the csv files
        are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"},{"role":"USER","message":"who
        bought the most number of tickets to finding nemo?"},{"role":"CHATBOT","message":"I
        will use python to find the user who bought the most number of tickets to
        Finding Nemo.","tool_calls":[{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\n# Read the CSV files\ndf1 = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\ndf2
        = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_bookings.csv'')\n\n#
        Filter the dataframe for ''Finding Nemo''\nfiltered_df = df2[df2[''movie'']
        == ''Finding Nemo'']\n\n# Get the user with the most number of tickets\nmax_tickets
        = filtered_df[''num_tickets''].max()\nuser_with_max_tickets = filtered_df[filtered_df[''num_tickets'']
        == max_tickets][''name''].values[0]\n\nprint(f\"The user who bought the most
        tickets to ''Finding Nemo'' is {user_with_max_tickets} with {max_tickets}
        tickets.\")"}}]}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":433,"output_tokens":230},"tokens":{"input_tokens":1373,"output_tokens":230}},"tool_calls":[{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\n# Read the CSV files\ndf1 = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\ndf2
        = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_bookings.csv'')\n\n#
        Filter the dataframe for ''Finding Nemo''\nfiltered_df = df2[df2[''movie'']
        == ''Finding Nemo'']\n\n# Get the user with the most number of tickets\nmax_tickets
        = filtered_df[''num_tickets''].max()\nuser_with_max_tickets = filtered_df[filtered_df[''num_tickets'']
        == max_tickets][''name''].values[0]\n\nprint(f\"The user who bought the most
        tickets to ''Finding Nemo'' is {user_with_max_tickets} with {max_tickets}
        tickets.\")"}}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Wed, 12 Jun 2024 08:23:26 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      transfer-encoding:
      - chunked
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - 69c057255edbf4428ca79a4cec843fee
      x-envoy-upstream-service-time:
      - '73'
      x-trial-endpoint-call-limit:
      - '10'
      x-trial-endpoint-call-remaining:
      - '5'
    status:
      code: 200
      message: OK
- request:
    body: '{"message": "", "chat_history": [{"role": "System", "message": "\nYou are
      working with 2 pandas dataframes in Python named df1, df2, etc.\nThis is the
      result of `print(df.head())` for each dataframe:\n|    | movie                    |
      user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
      | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
      | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7 |\n|  3
      | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
      Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
      |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The Shawshank
      Redemption | John   |             2 |\n|  1 | The Shawshank Redemption | Jerry  |             2
      |\n|  2 | The Shawshank Redemption | Jack   |             4 |\n|  3 | The Shawshank
      Redemption | Jeremy |             2 |\n|  4 | Finding Nemo             | Darren
      |             3 |\n\nDo note that the above dfs aren''t the complete df. It
      is only the first 5 rows of the df.\nUse this as a sample to understand the
      structure of the df. However, donot use this to make any calculations directly!\n\nThe
      complete path for the csv files are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"},
      {"role": "User", "message": "who bought the most number of tickets to finding
      nemo?"}, {"role": "Chatbot", "message": "I will use python to find the user
      who bought the most number of tickets to Finding Nemo.", "tool_calls": [{"name":
      "python_repl", "args": {"code": "import pandas as pd\n\n# Read the CSV files\ndf1
      = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\ndf2
      = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_bookings.csv'')\n\n#
      Filter the dataframe for ''Finding Nemo''\nfiltered_df = df2[df2[''movie'']
      == ''Finding Nemo'']\n\n# Get the user with the most number of tickets\nmax_tickets
      = filtered_df[''num_tickets''].max()\nuser_with_max_tickets = filtered_df[filtered_df[''num_tickets'']
      == max_tickets][''name''].values[0]\n\nprint(f\"The user who bought the most
      tickets to ''Finding Nemo'' is {user_with_max_tickets} with {max_tickets} tickets.\")"},
      "id": "2115d5305a4145a29ea277d358ede11e"}]}], "tools": [{"name": "peek_df",
      "description": "A function that will return a preview of the dataframe based
      on the table path.", "parameter_definitions": {"table_path": {"description":
      "the table path", "type": "str", "required": true}, "num_rows": {"description":
      "the number of rows of the table to preview", "type": "int", "required": true}}},
      {"name": "python_repl", "description": "Executes python code and returns the
      result. The code runs in a static sandbox without interactive mode, so print
      output or save output to a file.", "parameter_definitions": {"code": {"description":
      "Python code to execute.", "type": "str", "required": true}}}], "tool_results":
      [{"call": {"name": "python_repl", "parameters": {"code": "import pandas as pd\n\n#
      Read the CSV files\ndf1 = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\ndf2
      = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_bookings.csv'')\n\n#
      Filter the dataframe for ''Finding Nemo''\nfiltered_df = df2[df2[''movie'']
      == ''Finding Nemo'']\n\n# Get the user with the most number of tickets\nmax_tickets
      = filtered_df[''num_tickets''].max()\nuser_with_max_tickets = filtered_df[filtered_df[''num_tickets'']
      == max_tickets][''name''].values[0]\n\nprint(f\"The user who bought the most
      tickets to ''Finding Nemo'' is {user_with_max_tickets} with {max_tickets} tickets.\")"}},
      "outputs": [{"output": "The user who bought the most tickets to ''Finding Nemo''
      is Penelope with 5 tickets.\n"}]}], "stream": true}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3831'
      content-type:
      - application/json
      host:
      - api.cohere.com
      user-agent:
      - python-httpx/0.27.0
      x-client-name:
      - langchain:partner
      x-fern-language:
      - Python
      x-fern-sdk-name:
      - cohere
      x-fern-sdk-version:
      - 5.5.6
    method: POST
    uri: https://api.cohere.com/v1/chat
  response:
    body:
      string: '{"is_finished":false,"event_type":"stream-start","generation_id":"24c76047-56f8-4c02-8d5f-fd687a1aa2d1"}

        {"is_finished":false,"event_type":"search-results","documents":[{"id":"python_repl:0:3:0","output":"The
        user who bought the most tickets to ''Finding Nemo'' is Penelope with 5 tickets.\n","tool_name":"python_repl"}]}

        {"is_finished":false,"event_type":"text-generation","text":"The"}

        {"is_finished":false,"event_type":"text-generation","text":" user"}

        {"is_finished":false,"event_type":"text-generation","text":" who"}

        {"is_finished":false,"event_type":"text-generation","text":" bought"}

        {"is_finished":false,"event_type":"text-generation","text":" the"}

        {"is_finished":false,"event_type":"text-generation","text":" most"}

        {"is_finished":false,"event_type":"text-generation","text":" tickets"}

        {"is_finished":false,"event_type":"text-generation","text":" to"}

        {"is_finished":false,"event_type":"text-generation","text":" *"}

        {"is_finished":false,"event_type":"text-generation","text":"Finding"}

        {"is_finished":false,"event_type":"text-generation","text":" Nemo"}

        {"is_finished":false,"event_type":"text-generation","text":"*"}

        {"is_finished":false,"event_type":"text-generation","text":" is"}

        {"is_finished":false,"event_type":"text-generation","text":" Penelope"}

        {"is_finished":false,"event_type":"text-generation","text":" with"}

        {"is_finished":false,"event_type":"text-generation","text":" 5"}

        {"is_finished":false,"event_type":"text-generation","text":" tickets"}

        {"is_finished":false,"event_type":"text-generation","text":"."}

        {"is_finished":false,"event_type":"citation-generation","citations":[{"start":58,"end":66,"text":"Penelope","document_ids":["python_repl:0:3:0"]}]}

        {"is_finished":false,"event_type":"citation-generation","citations":[{"start":72,"end":81,"text":"5
        tickets","document_ids":["python_repl:0:3:0"]}]}

        {"is_finished":true,"event_type":"stream-end","response":{"response_id":"6116a009-2b40-4103-9a36-28801e71c7f0","text":"The
        user who bought the most tickets to *Finding Nemo* is Penelope with 5 tickets.","generation_id":"24c76047-56f8-4c02-8d5f-fd687a1aa2d1","chat_history":[{"role":"SYSTEM","message":"\nYou
        are working with 2 pandas dataframes in Python named df1, df2, etc.\nThis
        is the result of `print(df.head())` for each dataframe:\n|    | movie                    |
        user   |   rating |\n|---:|:-------------------------|:-------|---------:|\n|  0
        | The Shawshank Redemption | John   |        8 |\n|  1 | The Shawshank Redemption
        | Jerry  |        6 |\n|  2 | The Shawshank Redemption | Jack   |        7
        |\n|  3 | The Shawshank Redemption | Jeremy |        8 |\n|  4 | Finding Nemo             |
        Darren |        9 |\n\n|    | movie                    | name   |   num_tickets
        |\n|---:|:-------------------------|:-------|--------------:|\n|  0 | The
        Shawshank Redemption | John   |             2 |\n|  1 | The Shawshank Redemption
        | Jerry  |             2 |\n|  2 | The Shawshank Redemption | Jack   |             4
        |\n|  3 | The Shawshank Redemption | Jeremy |             2 |\n|  4 | Finding
        Nemo             | Darren |             3 |\n\nDo note that the above dfs
        aren''t the complete df. It is only the first 5 rows of the df.\nUse this
        as a sample to understand the structure of the df. However, donot use this
        to make any calculations directly!\n\nThe complete path for the csv files
        are for the corresponding dataframes are:\ntests/integration_tests/csv_agent/csv/movie_ratings.csv\ntests/integration_tests/csv_agent/csv/movie_bookings.csv\n"},{"role":"USER","message":"who
        bought the most number of tickets to finding nemo?"},{"role":"CHATBOT","message":"I
        will use python to find the user who bought the most number of tickets to
        Finding Nemo.","tool_calls":[{"name":"python_repl","parameters":null}]},{"role":"TOOL","tool_results":[{"call":{"name":"python_repl","parameters":{"code":"import
        pandas as pd\n\n# Read the CSV files\ndf1 = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_ratings.csv'')\ndf2
        = pd.read_csv(''tests/integration_tests/csv_agent/csv/movie_bookings.csv'')\n\n#
        Filter the dataframe for ''Finding Nemo''\nfiltered_df = df2[df2[''movie'']
        == ''Finding Nemo'']\n\n# Get the user with the most number of tickets\nmax_tickets
        = filtered_df[''num_tickets''].max()\nuser_with_max_tickets = filtered_df[filtered_df[''num_tickets'']
        == max_tickets][''name''].values[0]\n\nprint(f\"The user who bought the most
        tickets to ''Finding Nemo'' is {user_with_max_tickets} with {max_tickets}
        tickets.\")"}},"outputs":[{"output":"The user who bought the most tickets
        to ''Finding Nemo'' is Penelope with 5 tickets.\n"}]}]},{"role":"CHATBOT","message":"The
        user who bought the most tickets to *Finding Nemo* is Penelope with 5 tickets."}],"finish_reason":"COMPLETE","meta":{"api_version":{"version":"1"},"billed_units":{"input_tokens":482,"output_tokens":19},"tokens":{"input_tokens":1686,"output_tokens":19}},"citations":[{"start":58,"end":66,"text":"Penelope","document_ids":["python_repl:0:3:0"]},{"start":72,"end":81,"text":"5
        tickets","document_ids":["python_repl:0:3:0"]}],"documents":[{"id":"python_repl:0:3:0","output":"The
        user who bought the most tickets to ''Finding Nemo'' is Penelope with 5 tickets.\n","tool_name":"python_repl"}]},"finish_reason":"COMPLETE"}

        '
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Via:
      - 1.1 google
      access-control-expose-headers:
      - X-Debug-Trace-ID
      cache-control:
      - no-cache, no-store, no-transform, must-revalidate, private, max-age=0
      content-type:
      - application/stream+json
      date:
      - Wed, 12 Jun 2024 08:23:31 GMT
      expires:
      - Thu, 01 Jan 1970 00:00:00 UTC
      pragma:
      - no-cache
      server:
      - envoy
      transfer-encoding:
      - chunked
      vary:
      - Origin
      x-accel-expires:
      - '0'
      x-debug-trace-id:
      - 297059bc0bde3ff4633062d3e0f0cb51
      x-envoy-upstream-service-time:
      - '65'
      x-trial-endpoint-call-limit:
      - '10'
      x-trial-endpoint-call-remaining:
      - '4'
    status:
      code: 200
      message: OK
version: 1
